// <auto-generated />
using System;
using EntityRelationsDemo;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntityRelationsDemo.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EntityRelationsDemo.Bike", b =>
                {
                    b.Property<int>("BikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BikeId"), 1L, 1);

                    b.HasKey("BikeId");

                    b.ToTable("Bikes");
                });

            modelBuilder.Entity("EntityRelationsDemo.Bus", b =>
                {
                    b.Property<int>("License")
                        .HasColumnType("int");

                    b.Property<int>("Region")
                        .HasColumnType("int");

                    b.Property<int>("EngineId")
                        .HasColumnType("int");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("License", "Region");

                    b.HasIndex("EngineId");

                    b.ToTable("Bus");
                });

            modelBuilder.Entity("EntityRelationsDemo.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"), 1L, 1);

                    b.Property<int>("CustomEngineId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CarName");

                    b.HasKey("CarId");

                    b.HasIndex("CustomEngineId");

                    b.ToTable("SpecialCar", "customSchema");
                });

            modelBuilder.Entity("EntityRelationsDemo.Engine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Engines");
                });

            modelBuilder.Entity("EntityRelationsDemo.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("EntityRelationsDemo.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("EntityRelationsDemo.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("EntityRelationsDemo.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DeparmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeparmentId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("EntityRelationsDemo.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentResidenceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceOfBirthId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentResidenceId");

                    b.HasIndex("PlaceOfBirthId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EntityRelationsDemo.Models.StudentCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("EntityRelationsDemo.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Towns");
                });

            modelBuilder.Entity("EntityRelationsDemo.Bus", b =>
                {
                    b.HasOne("EntityRelationsDemo.Engine", "Engine")
                        .WithMany("Bus")
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Engine");
                });

            modelBuilder.Entity("EntityRelationsDemo.Car", b =>
                {
                    b.HasOne("EntityRelationsDemo.Engine", "CustomEngine")
                        .WithMany("Cars")
                        .HasForeignKey("CustomEngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomEngine");
                });

            modelBuilder.Entity("EntityRelationsDemo.Models.Address", b =>
                {
                    b.HasOne("EntityRelationsDemo.Models.Student", "Student")
                        .WithOne("Address")
                        .HasForeignKey("EntityRelationsDemo.Models.Address", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EntityRelationsDemo.Models.Employee", b =>
                {
                    b.HasOne("EntityRelationsDemo.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DeparmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EntityRelationsDemo.Models.Student", b =>
                {
                    b.HasOne("EntityRelationsDemo.Models.Town", "CurrentResidence")
                        .WithMany("CurrentResidences")
                        .HasForeignKey("CurrentResidenceId");

                    b.HasOne("EntityRelationsDemo.Models.Town", "PlaceOfBirth")
                        .WithMany("PlaceOfBirths")
                        .HasForeignKey("PlaceOfBirthId");

                    b.Navigation("CurrentResidence");

                    b.Navigation("PlaceOfBirth");
                });

            modelBuilder.Entity("EntityRelationsDemo.Models.StudentCourse", b =>
                {
                    b.HasOne("EntityRelationsDemo.Models.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityRelationsDemo.Models.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EntityRelationsDemo.Engine", b =>
                {
                    b.Navigation("Bus");

                    b.Navigation("Cars");
                });

            modelBuilder.Entity("EntityRelationsDemo.Models.Course", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("EntityRelationsDemo.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EntityRelationsDemo.Models.Student", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("EntityRelationsDemo.Models.Town", b =>
                {
                    b.Navigation("CurrentResidences");

                    b.Navigation("PlaceOfBirths");
                });
#pragma warning restore 612, 618
        }
    }
}
